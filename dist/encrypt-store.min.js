"use strict";
/*! encrypt-storejs v1.0.5 | MIT (c) 2024 Abdullah Al Fahim | https://github.com/abfahimb/encrypt-storeJS */Object.defineProperty(exports,"__esModule",{value:!0}),exports.EncryptStoreJS=void 0;class EncryptStoreJS{constructor(t,e){this.storageKey=t,this.key=e}static init(t,e){return EncryptStoreJS.instance=new EncryptStoreJS(t,e),EncryptStoreJS.instance}generateRandomSalt(t=16){const e=new Uint8Array(t);return window.crypto.getRandomValues(e),Array.from(e,(t=>String.fromCharCode(t))).join("")}expandKey(t,e){const r=[];for(let o=0;o<Math.max(t.length,e.length);o++){const n=t.charCodeAt(o%t.length),a=e.charCodeAt(o%e.length);r.push(String.fromCharCode(n^a))}return r.join("")}xorEncryptDecrypt(t){const e=this.generateRandomSalt(),r=this.expandKey(this.key,e);let o="";for(let e=0;e<t.length;e++)o+=String.fromCharCode(t.charCodeAt(e)^r.charCodeAt(e%r.length));return this.encodeToBase64(e+o)}encodeToBase64(t){try{return btoa(unescape(encodeURIComponent(t)))}catch(t){throw this.clearEncryptStore(),t}}decodeFromBase64(t){try{return decodeURIComponent(escape(atob(t)))}catch(t){throw this.clearEncryptStore(),t}}encryptData(t){return this.xorEncryptDecrypt(t)}decryptData(t){const e=this.decodeFromBase64(t),r=e.substring(0,16),o=e.substring(16),n=this.expandKey(this.key,r);let a="";for(let t=0;t<o.length;t++)a+=String.fromCharCode(o.charCodeAt(t)^n.charCodeAt(t%n.length));return a}setEncryptStore(t){if("object"==typeof t&&null!==t){const e=this.encryptData(JSON.stringify(t));"undefined"!=typeof window&&localStorage.setItem(this.storageKey,e)}else console.error("Value must be an object")}updateEncryptStore(t){if("undefined"!=typeof window){const e=localStorage.getItem(this.storageKey),r=e?JSON.parse(this.decryptData(e)):{};if("object"==typeof t&&null!==t){const e=Object.assign(Object.assign({},r),t),o=this.encryptData(JSON.stringify(e));localStorage.setItem(this.storageKey,o)}else console.error("Updates must be an object")}}deleteEncryptStore(t){if("undefined"!=typeof window){const e=localStorage.getItem(this.storageKey),r=e?JSON.parse(this.decryptData(e)):{};if(r&&"object"==typeof r){t.forEach((t=>delete r[t]));const e=this.encryptData(JSON.stringify(r));localStorage.setItem(this.storageKey,e)}else console.error("Stored data is not an object or does not exist")}}getEncryptStore(t){if("undefined"!=typeof window){const e=localStorage.getItem(this.storageKey),r=e?JSON.parse(this.decryptData(e)):null;return t&&r&&t in r?r[t]||null:r}return null}clearEncryptStore(){"undefined"!=typeof window&&localStorage.removeItem(this.storageKey)}}exports.EncryptStoreJS=EncryptStoreJS;
//# sourceMappingURL=encrypt-store.js.map